/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { TrustedContact } from "./TrustedContact";
import { TrustedContactCountArgs } from "./TrustedContactCountArgs";
import { TrustedContactFindManyArgs } from "./TrustedContactFindManyArgs";
import { TrustedContactFindUniqueArgs } from "./TrustedContactFindUniqueArgs";
import { CreateTrustedContactArgs } from "./CreateTrustedContactArgs";
import { UpdateTrustedContactArgs } from "./UpdateTrustedContactArgs";
import { DeleteTrustedContactArgs } from "./DeleteTrustedContactArgs";
import { User } from "../../user/base/User";
import { TrustedContactService } from "../trustedContact.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => TrustedContact)
export class TrustedContactResolverBase {
  constructor(
    protected readonly service: TrustedContactService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "TrustedContact",
    action: "read",
    possession: "any",
  })
  async _trustedContactsMeta(
    @graphql.Args() args: TrustedContactCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [TrustedContact])
  @nestAccessControl.UseRoles({
    resource: "TrustedContact",
    action: "read",
    possession: "any",
  })
  async trustedContacts(
    @graphql.Args() args: TrustedContactFindManyArgs
  ): Promise<TrustedContact[]> {
    return this.service.trustedContacts(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => TrustedContact, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "TrustedContact",
    action: "read",
    possession: "own",
  })
  async trustedContact(
    @graphql.Args() args: TrustedContactFindUniqueArgs
  ): Promise<TrustedContact | null> {
    const result = await this.service.trustedContact(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TrustedContact)
  @nestAccessControl.UseRoles({
    resource: "TrustedContact",
    action: "create",
    possession: "any",
  })
  async createTrustedContact(
    @graphql.Args() args: CreateTrustedContactArgs
  ): Promise<TrustedContact> {
    return await this.service.createTrustedContact({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TrustedContact)
  @nestAccessControl.UseRoles({
    resource: "TrustedContact",
    action: "update",
    possession: "any",
  })
  async updateTrustedContact(
    @graphql.Args() args: UpdateTrustedContactArgs
  ): Promise<TrustedContact | null> {
    try {
      return await this.service.updateTrustedContact({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TrustedContact)
  @nestAccessControl.UseRoles({
    resource: "TrustedContact",
    action: "delete",
    possession: "any",
  })
  async deleteTrustedContact(
    @graphql.Args() args: DeleteTrustedContactArgs
  ): Promise<TrustedContact | null> {
    try {
      return await this.service.deleteTrustedContact(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(
    @graphql.Parent() parent: TrustedContact
  ): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
