/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  TrustedContact as PrismaTrustedContact,
  User as PrismaUser,
} from "@prisma/client";

export class TrustedContactServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.TrustedContactCountArgs, "select">
  ): Promise<number> {
    return this.prisma.trustedContact.count(args);
  }

  async trustedContacts(
    args: Prisma.TrustedContactFindManyArgs
  ): Promise<PrismaTrustedContact[]> {
    return this.prisma.trustedContact.findMany(args);
  }
  async trustedContact(
    args: Prisma.TrustedContactFindUniqueArgs
  ): Promise<PrismaTrustedContact | null> {
    return this.prisma.trustedContact.findUnique(args);
  }
  async createTrustedContact(
    args: Prisma.TrustedContactCreateArgs
  ): Promise<PrismaTrustedContact> {
    return this.prisma.trustedContact.create(args);
  }
  async updateTrustedContact(
    args: Prisma.TrustedContactUpdateArgs
  ): Promise<PrismaTrustedContact> {
    return this.prisma.trustedContact.update(args);
  }
  async deleteTrustedContact(
    args: Prisma.TrustedContactDeleteArgs
  ): Promise<PrismaTrustedContact> {
    return this.prisma.trustedContact.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.trustedContact
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
