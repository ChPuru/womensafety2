/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { RiskZonePrediction } from "./RiskZonePrediction";
import { RiskZonePredictionCountArgs } from "./RiskZonePredictionCountArgs";
import { RiskZonePredictionFindManyArgs } from "./RiskZonePredictionFindManyArgs";
import { RiskZonePredictionFindUniqueArgs } from "./RiskZonePredictionFindUniqueArgs";
import { CreateRiskZonePredictionArgs } from "./CreateRiskZonePredictionArgs";
import { UpdateRiskZonePredictionArgs } from "./UpdateRiskZonePredictionArgs";
import { DeleteRiskZonePredictionArgs } from "./DeleteRiskZonePredictionArgs";
import { SensorData } from "../../sensorData/base/SensorData";
import { RiskZonePredictionService } from "../riskZonePrediction.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => RiskZonePrediction)
export class RiskZonePredictionResolverBase {
  constructor(
    protected readonly service: RiskZonePredictionService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "RiskZonePrediction",
    action: "read",
    possession: "any",
  })
  async _riskZonePredictionsMeta(
    @graphql.Args() args: RiskZonePredictionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [RiskZonePrediction])
  @nestAccessControl.UseRoles({
    resource: "RiskZonePrediction",
    action: "read",
    possession: "any",
  })
  async riskZonePredictions(
    @graphql.Args() args: RiskZonePredictionFindManyArgs
  ): Promise<RiskZonePrediction[]> {
    return this.service.riskZonePredictions(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => RiskZonePrediction, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "RiskZonePrediction",
    action: "read",
    possession: "own",
  })
  async riskZonePrediction(
    @graphql.Args() args: RiskZonePredictionFindUniqueArgs
  ): Promise<RiskZonePrediction | null> {
    const result = await this.service.riskZonePrediction(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => RiskZonePrediction)
  @nestAccessControl.UseRoles({
    resource: "RiskZonePrediction",
    action: "create",
    possession: "any",
  })
  async createRiskZonePrediction(
    @graphql.Args() args: CreateRiskZonePredictionArgs
  ): Promise<RiskZonePrediction> {
    return await this.service.createRiskZonePrediction({
      ...args,
      data: {
        ...args.data,

        sensorData: args.data.sensorData
          ? {
              connect: args.data.sensorData,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => RiskZonePrediction)
  @nestAccessControl.UseRoles({
    resource: "RiskZonePrediction",
    action: "update",
    possession: "any",
  })
  async updateRiskZonePrediction(
    @graphql.Args() args: UpdateRiskZonePredictionArgs
  ): Promise<RiskZonePrediction | null> {
    try {
      return await this.service.updateRiskZonePrediction({
        ...args,
        data: {
          ...args.data,

          sensorData: args.data.sensorData
            ? {
                connect: args.data.sensorData,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => RiskZonePrediction)
  @nestAccessControl.UseRoles({
    resource: "RiskZonePrediction",
    action: "delete",
    possession: "any",
  })
  async deleteRiskZonePrediction(
    @graphql.Args() args: DeleteRiskZonePredictionArgs
  ): Promise<RiskZonePrediction | null> {
    try {
      return await this.service.deleteRiskZonePrediction(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => SensorData, {
    nullable: true,
    name: "sensorData",
  })
  @nestAccessControl.UseRoles({
    resource: "SensorData",
    action: "read",
    possession: "any",
  })
  async getSensorData(
    @graphql.Parent() parent: RiskZonePrediction
  ): Promise<SensorData | null> {
    const result = await this.service.getSensorData(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
