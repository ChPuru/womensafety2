/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { SilentAlarm } from "./SilentAlarm";
import { SilentAlarmCountArgs } from "./SilentAlarmCountArgs";
import { SilentAlarmFindManyArgs } from "./SilentAlarmFindManyArgs";
import { SilentAlarmFindUniqueArgs } from "./SilentAlarmFindUniqueArgs";
import { CreateSilentAlarmArgs } from "./CreateSilentAlarmArgs";
import { UpdateSilentAlarmArgs } from "./UpdateSilentAlarmArgs";
import { DeleteSilentAlarmArgs } from "./DeleteSilentAlarmArgs";
import { User } from "../../user/base/User";
import { SilentAlarmService } from "../silentAlarm.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => SilentAlarm)
export class SilentAlarmResolverBase {
  constructor(
    protected readonly service: SilentAlarmService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "SilentAlarm",
    action: "read",
    possession: "any",
  })
  async _silentAlarmsMeta(
    @graphql.Args() args: SilentAlarmCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [SilentAlarm])
  @nestAccessControl.UseRoles({
    resource: "SilentAlarm",
    action: "read",
    possession: "any",
  })
  async silentAlarms(
    @graphql.Args() args: SilentAlarmFindManyArgs
  ): Promise<SilentAlarm[]> {
    return this.service.silentAlarms(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => SilentAlarm, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "SilentAlarm",
    action: "read",
    possession: "own",
  })
  async silentAlarm(
    @graphql.Args() args: SilentAlarmFindUniqueArgs
  ): Promise<SilentAlarm | null> {
    const result = await this.service.silentAlarm(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SilentAlarm)
  @nestAccessControl.UseRoles({
    resource: "SilentAlarm",
    action: "create",
    possession: "any",
  })
  async createSilentAlarm(
    @graphql.Args() args: CreateSilentAlarmArgs
  ): Promise<SilentAlarm> {
    return await this.service.createSilentAlarm({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SilentAlarm)
  @nestAccessControl.UseRoles({
    resource: "SilentAlarm",
    action: "update",
    possession: "any",
  })
  async updateSilentAlarm(
    @graphql.Args() args: UpdateSilentAlarmArgs
  ): Promise<SilentAlarm | null> {
    try {
      return await this.service.updateSilentAlarm({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SilentAlarm)
  @nestAccessControl.UseRoles({
    resource: "SilentAlarm",
    action: "delete",
    possession: "any",
  })
  async deleteSilentAlarm(
    @graphql.Args() args: DeleteSilentAlarmArgs
  ): Promise<SilentAlarm | null> {
    try {
      return await this.service.deleteSilentAlarm(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(@graphql.Parent() parent: SilentAlarm): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
