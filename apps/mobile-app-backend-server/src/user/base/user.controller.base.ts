/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { UserService } from "../user.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { UserCreateInput } from "./UserCreateInput";
import { User } from "./User";
import { UserFindManyArgs } from "./UserFindManyArgs";
import { UserWhereUniqueInput } from "./UserWhereUniqueInput";
import { UserUpdateInput } from "./UserUpdateInput";
import { AlertFindManyArgs } from "../../alert/base/AlertFindManyArgs";
import { Alert } from "../../alert/base/Alert";
import { AlertWhereUniqueInput } from "../../alert/base/AlertWhereUniqueInput";
import { SilentAlarmFindManyArgs } from "../../silentAlarm/base/SilentAlarmFindManyArgs";
import { SilentAlarm } from "../../silentAlarm/base/SilentAlarm";
import { SilentAlarmWhereUniqueInput } from "../../silentAlarm/base/SilentAlarmWhereUniqueInput";
import { TrustedContactFindManyArgs } from "../../trustedContact/base/TrustedContactFindManyArgs";
import { TrustedContact } from "../../trustedContact/base/TrustedContact";
import { TrustedContactWhereUniqueInput } from "../../trustedContact/base/TrustedContactWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class UserControllerBase {
  constructor(
    protected readonly service: UserService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: User })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createUser(@common.Body() data: UserCreateInput): Promise<User> {
    return await this.service.createUser({
      data: data,
      select: {
        createdAt: true,
        email: true,
        firstName: true,
        id: true,
        lastName: true,
        roles: true,
        updatedAt: true,
        username: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [User] })
  @ApiNestedQuery(UserFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async users(@common.Req() request: Request): Promise<User[]> {
    const args = plainToClass(UserFindManyArgs, request.query);
    return this.service.users({
      ...args,
      select: {
        createdAt: true,
        email: true,
        firstName: true,
        id: true,
        lastName: true,
        roles: true,
        updatedAt: true,
        username: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async user(
    @common.Param() params: UserWhereUniqueInput
  ): Promise<User | null> {
    const result = await this.service.user({
      where: params,
      select: {
        createdAt: true,
        email: true,
        firstName: true,
        id: true,
        lastName: true,
        roles: true,
        updatedAt: true,
        username: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateUser(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() data: UserUpdateInput
  ): Promise<User | null> {
    try {
      return await this.service.updateUser({
        where: params,
        data: data,
        select: {
          createdAt: true,
          email: true,
          firstName: true,
          id: true,
          lastName: true,
          roles: true,
          updatedAt: true,
          username: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteUser(
    @common.Param() params: UserWhereUniqueInput
  ): Promise<User | null> {
    try {
      return await this.service.deleteUser({
        where: params,
        select: {
          createdAt: true,
          email: true,
          firstName: true,
          id: true,
          lastName: true,
          roles: true,
          updatedAt: true,
          username: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/alerts")
  @ApiNestedQuery(AlertFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Alert",
    action: "read",
    possession: "any",
  })
  async findAlerts(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<Alert[]> {
    const query = plainToClass(AlertFindManyArgs, request.query);
    const results = await this.service.findAlerts(params.id, {
      ...query,
      select: {
        alertTime: true,
        alertType: true,
        createdAt: true,
        id: true,
        location: true,
        status: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/alerts")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async connectAlerts(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: AlertWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      alerts: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/alerts")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async updateAlerts(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: AlertWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      alerts: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/alerts")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async disconnectAlerts(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: AlertWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      alerts: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/silentAlarms")
  @ApiNestedQuery(SilentAlarmFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "SilentAlarm",
    action: "read",
    possession: "any",
  })
  async findSilentAlarms(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<SilentAlarm[]> {
    const query = plainToClass(SilentAlarmFindManyArgs, request.query);
    const results = await this.service.findSilentAlarms(params.id, {
      ...query,
      select: {
        activationTime: true,
        createdAt: true,
        id: true,
        location: true,
        status: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/silentAlarms")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async connectSilentAlarms(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: SilentAlarmWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      silentAlarms: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/silentAlarms")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async updateSilentAlarms(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: SilentAlarmWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      silentAlarms: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/silentAlarms")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async disconnectSilentAlarms(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: SilentAlarmWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      silentAlarms: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/trustedContacts")
  @ApiNestedQuery(TrustedContactFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "TrustedContact",
    action: "read",
    possession: "any",
  })
  async findTrustedContacts(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<TrustedContact[]> {
    const query = plainToClass(TrustedContactFindManyArgs, request.query);
    const results = await this.service.findTrustedContacts(params.id, {
      ...query,
      select: {
        createdAt: true,
        firstName: true,
        id: true,
        lastName: true,
        phoneNumber: true,
        relation: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/trustedContacts")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async connectTrustedContacts(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: TrustedContactWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      trustedContacts: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/trustedContacts")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async updateTrustedContacts(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: TrustedContactWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      trustedContacts: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/trustedContacts")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async disconnectTrustedContacts(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: TrustedContactWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      trustedContacts: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }
}
